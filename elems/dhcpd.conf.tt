# ─────────────────────────────────────────────────────────────────────────────┐
#                                                                              │
# Name:    elems/dhcpd.conf                                                    │
# Summary: Configuration file for ISC dhcpd.                                   │
# Authors:                                                                     │
#   - Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)              │
#                                                                              │
# Project:                                                                     │
#   - Homepage:        https://github.com/alem0lars/configs-dhcpd              │
#   - Getting started: see README.md in the project root folder                │
#                                                                              │
# License: Apache v2.0 (see below)                                             │
#                                                                              │
# ─────────────────────────────────────────────────────────────────────────────┤
#                                                                              │
# Licensed to the Apache Software Foundation (ASF) under one more contributor  │
# license agreements.  See the NOTICE file distributed with this work for      │
# additional information regarding copyright ownership. The ASF licenses this  │
# file to you under the Apache License, Version 2.0 (the "License"); you may   │
# not use this file except in compliance with the License.                     │
# You may obtain a copy of the License at                                      │
#                                                                              │
#   http://www.apache.org/licenses/LICENSE-2.0                                 │
#                                                                              │
# Unless required by applicable law or agreed to in writing, software          │
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT    │
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.             │
# See the License for the specific language governing permissions and          │
# limitations under the License.                                               │
#                                                                              │
# ─────────────────────────────────────────────────────────────────────────────┤
<% define_locals do
  variable "dhcpd.ddns_update_style", as: :ddns_update_style
  variable "dhcpd.log_facility", as: :log_facility

  variable "dhcpd.domain_name", as: :domain_name
  variable "dhcpd.dns_servers", as: :dns_servers

  variable "dhcpd.subnets", as: :subnets
  variable "dhcpd.hosts", as: :hosts

  def range(start_address, end_address, bootp_support)
    tokens = []
    tokens << "range"
    tokens << "dynamic-bootp" if subnet[:bootp_support]
    tokens << start_address
    tokens << end_address

    "#{tokens.join(" ")};"
  end
end %>
# ─────────────────────────────────────────────────────────────────────────────┘


# The DHCP server will normally assume that the configuration information about
# a given network segment is not known to be correct and is not authoritative.
# This is so that if a naive user installs a DHCP server not fully understanding
# how to configure it, it does not send spurious DHCPNAK messages to clients
# that have obtained addresses from a legitimate DHCP server on the network.
authoritative;

# Use the new standard DDNS style.
ddns-update-style <%= local! :ddns_update_style %>;

# Domain name.
option domain-name "<%= local! :domain_name %>";

# Use this to send dhcp log messages to a different log file (you also
# have to hack syslog.conf to complete the redirection).
log-facility <%= local! :log_facility %>;

# Configure subnets.
<% local!(:subnets).each do |subnet| %>
subnet <%= subnet[:address] %> netmask <%= subnet[:netmask] %> {
  # Lease time.
  default-lease-time <%= subnet[:default_lease_time] %>;
  max-lease-time <%= subnet[:max_lease_time] %>;

  <% if subnet[:start_address] && subnet[:end_address] %>
    <%= range(subnet[:start_address],
              subnet[:end_address],
              subnet[:bootp_support]) %>
  <% else %>
    <% if subnet[:known_clients] %>
      pool {
        <%= range(subnet[:known_clients][:start_address],
                  subnet[:known_clients][:end_address],
                  subnet[:bootp_support]) %>
        deny unknown-clients
      }
    <% end %>
    <% if subnet[:unknown_clients] %>
      pool {
        <%= range(subnet[:unknown_clients][:start_address],
                  subnet[:unknown_clients][:end_address],
                  subnet[:bootp_support]) %>
        allow unknown-clients
      }
    <% end %>
  <% end %>

  option domain-name-servers <%= subnet[:dns_servers].join(", ") %>;
  option ntp-servers <%= subnet[:ntp_servers].join(", ") %>;

  # TODO
  option broadcast-address 10.254.239.31;
  option routers rtr-239-32-1.example.org;
}
<% end %>

# Configure static hosts mappings.
<% local!(:hosts).each do |host| %>
host <%= host[:hostname] %> {
  hardware ethernet <%= host[:mac_address] %>;
  fixed-address <%= host[:address] %>;
  option host-name "<%= host[:hostname] %>";
}
<% end %>


# vim: set filetype=eruby.conf :
